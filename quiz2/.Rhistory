file <- read.csv('./seaflow_21min.csv')
fol <- formula(response ~ fsc_small + fsc_perp + chl_small + pe + chl_big + chl_small)
fol <- formula(pop ~ fsc_small + fsc_perp + chl_small + pe + chl_big + chl_small)
fol <- formula(pop ~ fsc_small + fsc_perp + chl_small + pe + chl_big + chl_small)
train <- file[sample(size, (size / 2), replace = TRUE), ]
size <- nrow(file)
train <- file[sample(size, (size / 2), replace = TRUE), ]
test  <- file[sample(size, (size / 2), replace = TRUE), ]
library(randomForest)
model <- randomForest(fol, data = train)
results <- predict(model, newdata = test, type = "class")
nrow(test[test$pop == results, ]) / nrow(test)
source('./setup.r')
read.csv('./seaflow_21min.csv')
file <- read.csv('./seaflow_21min.csv')
library(ggplot2)
library(caret)
qplot(file$pe, file$chl_small, color = file$pop)
size <- nrow(file)
train <- file[sample(size, (size / 2), replace = TRUE)]
train <- file[sample(size, (size / 2), replace = TRUE), ]
test  <- file[sample(size, (size / 2), replace = TRUE), ]
summary(train)
summary(test)
summary(file)
nrow(file[file$pop == 'synecho'])
nrow(file[file$pop == 'synecho', ])
library(rpart)
fol <- formula(pop ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small)
model <- rpart(fol, method = "class", data = train)
print(model)
results <- predict(model, test)
results
summary(results)
head(results)
results <- predict(model, test, type = "class")
head(results)
results <- predict(model, test, type = "prob")
head(results)
results <- predict(model, test, type = "vector")
head(results)
results
summary(results)
head(results)
nrow(results)
ncol(results)
results <- predict(model, test, type = "class")
head(results)
results
sum(file$pop == results)
results[0]
results[1]
results[2]
results <- predict(model, test)
head(results)
results <- predict(model, train)
head(results)
results <- predict(model, test)
head(results)
results <- predict(model, newdata = test, type = "class")
table(file$pop, results)
table(test$pop, results)
test$pop == results
nrows(test[test$pop == results, ]) / nrows(test)
nrow(test[test$pop == results, ]) / nrow(test)
nrow(test[test$pop != results, ]) / nrow(test)
library(randomforest)
install.packages("randomforest")
install.packages("randomForest")
library(randomForest)
model <- randomForest(fol, data=train)
results <- predict(model, newdata = test, type = "class")
nrow(test[test$pop == results, ]) / nrow(test)
importance(model)
library(e1071)
model <- svm(fol, data = train)
results <- predict(model, newdata = test, type = "class")
nrow(test[test$pop == results, ]) / nrow(test)
model1 <- rpart(fol, method = "class", data = train)
model2 <- randomForest(fol, data = train)
model3 <- svm(fol, data = train)
results1 <- predict(model1, newdata = test, type = "class")
results2 <- predict(model2, newdata = test, type = "class")
results3 <- predict(model3, newdata = test, type = "class")
table(pred = results1, true = test$pop)
table(pred = results2, true = test$pop)
table(pred = results3, true = test$pop)
qplot(file$time, file$fsc_small, color = file$pop)
qplot(file$time, file$fsc_perp, color = file$pop)
qplot(file$time, file$fsc_big, color = file$pop)
qplot(file$time, file$pe, color = file$pop)
qplot(file$time, file$chl_small, color = file$pop)
qplot(file$time, file$chl_big, color = file$pop)
qplot(file$time, file$fsc_perp, color = file$pop)
qplot(file$time, file$fsc_big, color = file$pop)
qplot(file$time, file$chl_big, color = file$pop)
test2 <- test[test$file_id != 208, ]
nrow(test)
nrow(test2)
file2 <- file[file$file_id != 208, ]
nrow(file)
nrow(file2)
size2 <- nrow(file2)
train <- file[sample(size, (size / 2), replace = TRUE), ]
train2 <- file2[sample(size2, (size2 / 2), replace = TRUE), ]
test2  <- file2[sample(size2, (size2 / 2), replace = TRUE), ]
model1 <- rpart(fol, method = "class", data = train2)
model2 <- randomForest(fol, data = train2)
model3 <- svm(fol, data = train2)
results1 <- predict(model1, newdata = test2, type = "class")
results2 <- predict(model2, newdata = test2, type = "class")
results3 <- predict(model3, newdata = test2, type = "class")
nrow(test2[test2$pop == results1, ]) / nrow(test2)
nrow(test2[test2$pop == results2, ]) / nrow(test2)
nrow(test2[test2$pop == results3, ]) / nrow(test2)
0.972062 - 0.9220923
0.972062 - 0.9220923
train <- file[sample(size, (size / 2), replace = TRUE), ]
test  <- file[sample(size, (size / 2), replace = TRUE), ]
model <- randomForest(fol, data = train)
results <- predict(model, newdata = test, type = "class")
nrow(test[test$pop == results, ]) / nrow(test)
train <- file[sample(size, (size / 2), replace = TRUE), ]
test  <- file[sample(size, (size / 2), replace = TRUE), ]
model <- randomForest(fol, data = train)
results <- predict(model, newdata = test, type = "class")
nrow(test[test$pop == results, ]) / nrow(test)
train <- file[sample(size, (size / 2), replace = TRUE), ]
test  <- file[sample(size, (size / 2), replace = TRUE), ]
model <- randomForest(fol, data = train)
results <- predict(model, newdata = test, type = "class")
nrow(test[test$pop == results, ]) / nrow(test)
train <- file[sample(size, (size / 2), replace = TRUE), ]
test  <- file[sample(size, (size / 2), replace = TRUE), ]
model <- randomForest(fol, data = train)
results <- predict(model, newdata = test, type = "class")
nrow(test[test$pop == results, ]) / nrow(test)
0.9519505 - 0.9486329
library(caret)
partitions <- createDataPartition(file, p = .5, times = 2)
partitions <- createDataPartition(file$file_id, p = .5, times = 2, list = FALSE)
partitions
head(partitions)
partitions <- createDataPartition(file$file_id, p = .5, times = 1, list = FALSE)
train <- file[partitions, ]
test  <- file[-partitions, ]
head(train)
head(test)
model <- randomForest(fol, data = train)
results <- predict(model, newdata = test, type = "class")
nrow(test[test$pop == results, ]) / nrow(test)
partitions <- createDataPartition(file$file_id, p = .5, times = 2, list = FALSE)
train <- file[partitions[0], ]
test  <- file[partitions[1], ]
head(train)
head(partitions)
train <- file[partitions$Resample1, ]
train <- file[partitions, ]
head(train)
train <- file[-partitions, ]
head(train)
nrow(train)
head(partitions(0))
set.seed(814)
partitions <- createDataPartition(file$file_id, p = .5, times = 1, list = FALSE)
train <- file[partitions, ]
test  <- file[-partitions, ]
model <- randomForest(fol, data = train)
results <- predict(model, newdata = test, type = "class")
nrow(test[test$pop == results, ]) / nrow(test)
set.seed(99999)
partitions <- createDataPartition(file$file_id, p = .5, times = 1, list = FALSE)
train <- file[partitions, ]
test  <- file[-partitions, ]
model <- randomForest(fol, data = train)
results <- predict(model, newdata = test, type = "class")
nrow(test[test$pop == results, ]) / nrow(test)
set.seed(999)
partitions <- createDataPartition(file$file_id, p = .5, times = 1, list = FALSE)
train <- file[partitions, ]
test  <- file[-partitions, ]
model <- randomForest(fol, data = train)
results <- predict(model, newdata = test, type = "class")
nrow(test[test$pop == results, ]) / nrow(test)
set.seed(1234)
partitions <- createDataPartition(file$file_id, p = .5, times = 1, list = FALSE)
train <- file[partitions, ]
test  <- file[-partitions, ]
model <- randomForest(fol, data = train)
results <- predict(model, newdata = test, type = "class")
nrow(test[test$pop == results, ]) / nrow(test)
train <- file[sample(size, (size / 2), replace = FALSE), ]
test  <- file[sample(size, (size / 2), replace = FALSE), ]
model <- randomForest(fol, data = train)
results <- predict(model, newdata = test, type = "class")
nrow(test[test$pop == results, ]) / nrow(test)
sampleIndices  <- sample(size, (size / 2), replace = FALSE)
head(sampleIndices)
head(-sampleIndices)
head(~sampleIndices)
train <- file[sampleIndices, ]
test <- file[-sampleIndices, ]
head(train)
head(test)
nrow(train)
nrow(test)
model <- randomForest(fol, data = train)
results <- predict(model, newdata = test, type = "class")
nrow(test[test$pop == results, ]) / nrow(test)
exit
quit
