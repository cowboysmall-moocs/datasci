install.packages("KernSmooth")
library(KernSmooth)
library(datasets)
data(iris)
?iris
iris
s <- split(iris, iris$Species)
s
lapply(s, function(x) colMeans(s))
lapply(s, function(x) colMeans(x))
lapply(s, function(x) colMeans(x[,]))
lapply(s, function(x) colMeans(x[, c("Sepal.Length")]))
lapply(s, function(x) colMeans(x[, "Sepal.Length"]))
s[, Sepal.Length]
s[, "Sepal.Length""]
""
s[, "Sepal.Length"]
s
s[, s$Sepal.Length]
sapply(s, function(x) colMeans(x[, "Sepal.Length"]))
sapply(s, function(x) colMeans(x[, c("Sepal.Length", "Sepal.Width")]))
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
rowMeans(iris[, 1:4])
colMeans(iris)
apply(iris[, 1:4], 2, mean)
data(mtcars)
mtcars
mean(mtcars$mpg, mtcars$cyl)
split(mtcars, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
sapply(mtcars, cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
mean(mtcars$mpg, mtcars$cyl)
split(mtcars, mtcars$cyl)
apply(iris[, 1:4], 2, mean)
with(mtcars, tapply(hp, cyl, mean))
with(mtcars, tapply(hp, cyl, mean))$4
o <- with(mtcars, tapply(hp, cyl, mean))
o
type(o)
class(o)
attributes(o)
0["4"]
o[0]
o["4"]
o["4"][1]
class(o["4"])
attributes(o["4"])
o["4"]$names
o["4"](1)
o$"4"
with(mtcars, tapply(hp, cyl, mean))
with(mtcars, tapply(hp, cyl, mean, simplify = FALSE))
out <- with(mtcars, tapply(hp, cyl, mean, simplify = FALSE))
out
out[8]
out['8']
out['8'] - out['4']
out['8'][1]
out[['8']]
out[['8']] - out[['4']]
debug(ls)
ls
ls
?ls
ls(pattern = "O")
clear()
out[['8']] - out[['4']]
tapply(s, "Sepal.Length", mean)
tapply(s, Sepal.Length, mean)
with(mtcars, tapply(hp, cyl, mean))
with(s, tapply(Sepal.Length, Species, mean))
s
with(iris, tapply(Sepal.Length, Species, mean))
setwd("~/Workspace/Coursera/Introduction to Data Science/Materials/datasci/assessment1/titanic")
file <- read.csv('./data/train.csv')
summary(file)
head(file)
library(ggplot2)
qplot(file$Embarked, file$Survived, color = file$Pclass)
qplot(file$Embarked, file$Pclass, color = file$Survived)
qplot(file$Embarked, file$Age, color = file$Survived)
library(plyr)
median(file$Age, na.rm=TRUE)
mean(file$Age, na.rm=TRUE)
median(file$Age, na.rm=TRUE)
file$Age[is.na(file$Age)]
file$Age[is.na(file$Age)] <- median(file$Age, na.rm = TRUE)
qplot(file$Embarked, file$Age, color = file$Survived)
qplot(file$Fare, file$Age, color = file$Survived)
qplot(file$Fare, file$Age, color = file$Sex)
qplot(file$Age, file$Survived, color = file$Sex)
partitions <- createDataPartition(file$PassengerId, p = .5, times = 1, list = FALSE)
library(caret)
partitions <- createDataPartition(file$PassengerId, p = .5, times = 1, list = FALSE)
train <- file[partitions, ]
test  <- file[-partitions, ]
nrow(file)
nrow(train)
nrow(test)
library(randomForest)
fol <- formula(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare)
model <- randomForest(fol, data = train)
results <- predict(model, newdata = test, type = "class")
nrow(test[test$Survived == results, ]) / nrow(test)
fol <- formula(Survived ~ Pclass + Sex + Age)
model <- randomForest(fol, data = train)
y
model <- rpart(fol, method = "class", data = train)
library(rpart)
model <- rpart(fol, method = "class", data = train)
results <- predict(model, newdata = test, type = "class")
nrow(test[test$Survived == results, ]) / nrow(test)
library(e1071)
model <- svm(fol, data = train)
results <- predict(model, newdata = test, type = "class")
nrow(test[test$Survived == results, ]) / nrow(test)
model <- rpart(fol, method = "class", data = train)
results <- predict(model, newdata = test, type = "class")
importance(model)
summary(results)
nrow(test[test$Survived == results, ]) / nrow(test)
model <- svm(fol, data = train)
results <- predict(model, newdata = test, type = "class")
summary(results)
results
nrow(test[test$Survived == results, ]) / nrow(test)
results <- predict(model, newdata = test)
nrow(test[test$Survived == results, ]) / nrow(test)
results[0]
results[1]
results[2]
test$Survived == results
test$Survived > 0.5
head(test$Survived)
results
results > 0.5
nrow(test[test$Survived == round(results), ]) / nrow(test)
model <- rpart(fol, method = "class", data = train)
results <- predict(model, newdata = test, type = "class")
nrow(test[test$Survived == results, ]) / nrow(test)
results
model <- svm(fol, data = train)
results <- predict(model, newdata = test, type = "class")
nrow(test[test$Survived == results, ]) / nrow(test)
nrow(test[test$Survived == round(results), ]) / nrow(test)
model <- randomForest(fol, data = train)
results <- predict(model, newdata = test, type = "class")
results
nrow(test[test$Survived == round(results), ]) / nrow(test)
file2 <- read.csv('./data/test.csv')
file2$Age[is.na(file2$Age)] <- median(file2$Age, na.rm = TRUE)
model <- svm(fol, data = file2)
results <- predict(model, newdata = file2, type = "class")
file2$Survived <- round(results)
head(file2)
model <- svm(fol, data = train)
results <- predict(model, newdata = file2, type = "class")
head(results)
file2$Survived <- round(results)
head(file2)
head(round(results))
file3 <- read.csv('./data/test.csv')
model <- randomForest(fol, data = file)
results <- predict(model, newdata = file3, type = "class")
file3$Survived <- round(results)
head(file3)
write.csv(file3[, c("PassengerId", "Survived")], './titanic-prediction.csv', row.names = FALSE)
file3
results
write.csv(file3[, c("PassengerId", "Survived")], './titanic-prediction.csv', row.names = FALSE, na = "0")
file3
file4 <- read.csv('./data/test.csv')
file4$Age[is.na(file4$Age)] <- median(file4$Age, na.rm = TRUE)
results <- predict(model, newdata = file4, type = "class")
results
file4$Survived <- round(results)
write.csv(file4[, c("PassengerId", "Survived")], './titanic-prediction.csv', row.names = FALSE)
write.csv(file4[, c("PassengerId", "Survived")], './titanic-prediction.csv', row.names = FALSE, quote = FALSE)
fol <- formula(Survived ~ Pclass + Sex + Age)
summary(file)
fol <- formula(Survived ~ Pclass + Sex + Age + SibSp + Parch + Embarked)
file <- read.csv('./data/train.csv')
file$Age[is.na(file$Age)] <- median(file$Age, na.rm = TRUE)
fol <- formula(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked)
partitions <- createDataPartition(file$PassengerId, p = .5, times = 1, list = FALSE)
train <- file[partitions, ]
test  <- file[-partitions, ]
model <- svm(fol, data = train)
results <- predict(model, newdata = test, type = "class")
nrow(test[test$Survived == round(results), ]) / nrow(test)
data <- read.csv('./data/test.csv')
results <- predict(model, newdata = data, type = "class")
data$Age[is.na(data$Age)] <- median(data$Age, na.rm = TRUE)
results <- predict(model, newdata = data, type = "class")
mode(data$Embarked)
data$Embarked
data$Fare
data$Fare[is.na(data$Fare)] <- median(data$Fare, na.rm = TRUE)
results <- predict(model, newdata = data, type = "class")
data$Fare
describe(data)
summary(data)
data$Parch
data$SibSp
data$Age
data$Pclass
data$Sex
fol <- formula(Survived ~ Pclass + Sex + Age + SibSp + Parch + Embarked)
model <- svm(fol, data = train)
results <- predict(model, newdata = test, type = "class")
nrow(test[test$Survived == round(results), ]) / nrow(test)
results <- predict(model, newdata = data, type = "class")
data$Embarked
data$Parch
data$SibSp
data$Sex
data$Pclass
fol <- formula(Survived ~ Pclass + Sex + Age + Embarked)
model <- svm(fol, data = train)
results <- predict(model, newdata = test, type = "class")
nrow(test[test$Survived == round(results), ]) / nrow(test)
fol <- formula(Survived ~ Pclass + Sex + Age + SibSp + Parch)
model <- svm(fol, data = train)
results <- predict(model, newdata = test, type = "class")
nrow(test[test$Survived == round(results), ]) / nrow(test)
results <- predict(model, newdata = data, type = "class")
data$Survived <- round(results)
write.csv(file4[, c("PassengerId", "Survived")], './titanic-prediction.csv', row.names = FALSE, quote = FALSE)
model <- svm(fol, data = test)
results <- predict(model, newdata = train, type = "class")
nrow(train[train$Survived == round(results), ]) / nrow(train)
model <- randomForest(fol, data = train)
results <- predict(model, newdata = test, type = "class")
nrow(train[train$Survived == round(results), ]) / nrow(train)
nrow(train[train$Survived == results, ]) / nrow(train)
nrow(test[test$Survived == round(results), ]) / nrow(test)
results <- predict(model, newdata = data, type = "class")
data$Survived <- round(results)
write.csv(file4[, c("PassengerId", "Survived")], './titanic-prediction.csv', row.names = FALSE, quote = FALSE)
nrow(test[test$Survived == round(results), ]) / nrow(test)
importance(model)
fol <- formula(Survived ~ Pclass + Sex + Age)
model <- randomForest(fol, data = train)
results <- predict(model, newdata = test, type = "class")
nrow(test[test$Survived == round(results), ]) / nrow(test)
importance(model)
fol <- formula(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked)
model <- randomForest(fol, data = train)
results <- predict(model, newdata = test, type = "class")
nrow(test[test$Survived == round(results), ]) / nrow(test)
importance(model)
fol <- formula(Survived ~ Pclass + Sex + Age + Fare)
model <- randomForest(fol, data = train)
results <- predict(model, newdata = test, type = "class")
nrow(test[test$Survived == round(results), ]) / nrow(test)
importance(model)
model <- svm(fol, data = train)
results <- predict(model, newdata = test, type = "class")
nrow(test[test$Survived == round(results), ]) / nrow(test)
importance(model)
print (model)
model <- svm(fol, data = train, kernel = "sigmoid", gamma = 0.001, cost = 1000)
results <- predict(model, newdata = test, type = "class")
nrow(test[test$Survived == round(results), ]) / nrow(test)
model <- svm(fol, data = train, kernel = "sigmoid", gamma = 0.01, cost = 100)
results <- predict(model, newdata = test, type = "class")
nrow(test[test$Survived == round(results), ]) / nrow(test)
model <- svm(fol, data = train, kernel = "sigmoid", gamma = 0.0001, cost = 10000)
results <- predict(model, newdata = test, type = "class")
nrow(test[test$Survived == round(results), ]) / nrow(test)
model <- svm(fol, data = train, kernel = "polynomial", gamma = 0.0001, cost = 10000)
results <- predict(model, newdata = test, type = "class")
nrow(test[test$Survived == round(results), ]) / nrow(test)
model <- svm(fol, data = train, kernel = "polynomial", gamma = 0.01, cost = 10)
results <- predict(model, newdata = test, type = "class")
nrow(test[test$Survived == round(results), ]) / nrow(test)
model <- svm(fol, data = train, kernel = "radial basis", gamma = 0.01, cost = 10)
